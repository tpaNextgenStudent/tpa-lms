generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  refresh_token_expires_in Int?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model LmsUser {
  id         String @id @default(cuid())
  cohortId   String
  githubName String
  name       String
  surname    String
  email      String @unique
  avatar     String
  bio        String
  role       String
  cohort     Cohort @relation(fields: [cohortId], references: [id])


  attempts        Attempt[] @relation("user")
  attemptsTeacher Attempt[] @relation("teacher")
}

model Cohort {
  id               String             @id @default(cuid())
  name             String
  CurriculumModule CurriculumModule[]
  users            LmsUser[]
}

model Module {
  id    String @id @default(cuid())
  name  String
  tasks Task[]
}

model Task {
  id          String @id @default(cuid())
  position    Int
  name        String
  description String
  link        String
  type        String
  moduleId    String
  module      Module @relation(fields: [moduleId], references: [id])
}

model CurriculumModule {
  id       String
  cohortId String
  name     String
  cohort   Cohort           @relation(fields: [cohortId], references: [id])
  tasks    CurriculumTask[]

  @@id([id, cohortId])
}

model CurriculumTask {
  cohortId    String
  id          String
  moduleId    String
  name        String
  position    Int
  type        String
  description String
  link        String
  module      CurriculumModule @relation(fields: [moduleId, cohortId], references: [id, cohortId])
  attempts    Attempt[]

  @@id([id, cohortId])
}

model Attempt {
  id             String         @id @default(cuid())
  userId         String
  user           LmsUser        @relation("user", fields: [userId], references: [id])
  teacherId      String
  teacher        LmsUser        @relation("teacher", fields: [teacherId], references: [id])
  taskId         String
  answer         String
  attempt_number Int
  cohortId       String
  comment        String
  score          Int
  task           CurriculumTask @relation(fields: [taskId, cohortId], references: [id, cohortId])
}
