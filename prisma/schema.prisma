generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String  @unique
  refresh_token            String?
  access_token             String?
  refresh_token_expires_in Int?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)


  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  assignments   Assignment[]
  name          String?
  surname       String?
  bio           String?
}

model Profile {
  login             String @unique
  role              String
  providerAccountId String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Cohort {
  id          String       @id @default(cuid())
  name        String
  assignments Assignment[]
}

model Assignment {
  id                String      @id @default(cuid())
  cohortId          String
  cohort            Cohort      @relation(fields: [cohortId], references: [id])
  userId            String
  user              User        @relation(fields: [userId], references: [id])
  role              userRole
  curriculum        Curriculum?
  checkAttempts     Attempt[]   @relation("teacher")
  submittedAttempts Attempt[]   @relation("student")
}

enum userRole {
  student
  teacher
}

model Module {
  id             String          @id @default(cuid())
  name           String
  moduleVersions ModuleVersion[]
}

model ModuleVersion {
  id             String @id @default(cuid())
  moduleId       String
  module         Module @relation(fields: [moduleId], references: [id])
  version_number Int
  tasks          Task[]
}

model Task {
  id              String        @id @default(cuid())
  curriculumId    String
  moduleVersionId String
  moduleVersion   ModuleVersion @relation(fields: [moduleVersionId], references: [id])
  type            taskType
  position        Int
  name            String
  description     String
  link            String
  attempts        Attempt[]
}

enum taskType {
  info
  code
}

model Curriculum {
  id                 String     @id @default(cuid())
  assignmentId       String     @unique
  assignment         Assignment @relation(fields: [assignmentId], references: [id])
  moduleProgress     Json
  lastModulePosition Int
  lastTaskPosition   Int
}

model Attempt {
  id                 String     @id @default(cuid())
  assignmentId       String
  student            Assignment @relation("student", fields: [assignmentId], references: [id])
  taskId             String
  task               Task       @relation(fields: [taskId], references: [id])
  score              Int
  answer             String
  comment            String
  attemptNumber      Int
  teacherAssigmentId String
  teacher            Assignment @relation("teacher", fields: [teacherAssigmentId], references: [id])
  submit_date        DateTime
  evaluation_date    DateTime?
}
